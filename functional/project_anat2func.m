function project_anat2func(session_dir,runNum,func)
% Projects anatomical ROIs into functional space in the bold directory
%   specified by the 'runNum' input, where 'runNum' is an index into a
%   bold directory.
%
%   Usage: project_anat2func(session_dir,runNum,func)
%
%   Written by Andrew S Bock Apr 2015

%% Set default parameters
if ~exist('func','var')
    func = 'rf'; % functional data file used for registration
end
mask_names = {...
    'lh_ventricle' ...
    'rh_ventricle' ...
    'third_ventricle' ...
    'fourth_ventricle' ...
    'brainstem' ...
    'unknown' ...
    };
%% Find bold run directories
d = find_bold(session_dir);
nruns = length(d);
disp(['Session_dir = ' session_dir]);
disp(['Number of runs = ' num2str(nruns)]);
%% Set runs
if ~exist('runNum','var')
    runNum = 1:length(d);
end
%% Project anatomical ROIs to functional space
for rr = runNum;
    disp(['Projecting anatomical ROIs to functional space: Run ' num2str(rr)]);
    bbreg_file = fullfile(session_dir,d{rr},'func_bbreg.dat'); % registration file
    % Brain mask (dialate by 1)
    system(['mri_vol2vol --mov ' fullfile(session_dir,d{rr},[func '.nii.gz']) ...
        ' --targ ' fullfile(session_dir,'brain.nii.gz') ' --o ' ...
        fullfile(session_dir,d{rr},'func.brain.nii.gz') ' --reg ' ...
        bbreg_file ' --inv --nearest']);
    system(['mri_binarize --i ' fullfile(session_dir,d{rr},'func.brain.nii.gz') ...
        ' --match 1 --dilate 1 --o ' fullfile(session_dir,d{rr},'func.brainmask.nii.gz')]);
    % Grey matter
    system(['mri_vol2vol --mov ' fullfile(session_dir,d{rr},[func '.nii.gz']) ...
        ' --targ ' fullfile(session_dir,'aseg.gm.nii.gz') ' --o ' ...
        fullfile(session_dir,d{rr},'func.aseg.gm.nii.gz') ' --reg ' ...
        bbreg_file ' --inv --nearest']);
    system(['fslmaths ' fullfile(session_dir,d{rr},'func.aseg.gm.nii.gz') ' -bin' ...
        ' ' fullfile(session_dir,d{rr},'func.aseg.gm.nii.gz')]);
    % White matter (erode by 2)
    system(['mri_vol2vol --mov ' fullfile(session_dir,d{rr},[func '.nii.gz']) ...
        ' --targ ' fullfile(session_dir,'aseg.wm.nii.gz') ' --o ' ...
        fullfile(session_dir,d{rr},'func.aseg.wm.nii.gz') ' --reg ' ...
        bbreg_file ' --inv --nearest']);
    system(['fslmaths ' fullfile(session_dir,d{rr},'func.aseg.wm.nii.gz') ' -bin' ...
        ' ' fullfile(session_dir,d{rr},'func.aseg.wm.nii.gz')]);
    system(['mri_binarize --i ' fullfile(session_dir,d{rr},'func.aseg.wm.nii.gz') ...
        ' --match 1 --erode 2 --o ' fullfile(session_dir,d{rr},'func.aseg.wm.nii.gz')]);
    % All other masks (erode by 1)
    for mm = 1:length(mask_names)
        system(['mri_vol2vol --mov ' fullfile(session_dir,d{rr},[func '.nii.gz']) ...
            ' --targ ' fullfile(session_dir,['aseg.' mask_names{mm} '.nii.gz']) ' --o ' ...
            fullfile(session_dir,d{rr},['func.aseg.' mask_names{mm} '.nii.gz']) ' --reg ' ...
            bbreg_file ' --inv --nearest']);
        system(['fslmaths ' fullfile(session_dir,d{rr},['func.aseg.' mask_names{mm} '.nii.gz']) ' -bin' ...
            ' ' fullfile(session_dir,d{rr},['func.aseg.' mask_names{mm} '.nii.gz'])]);
        system(['mri_binarize --i ' fullfile(session_dir,d{rr},['func.aseg.' mask_names{mm} '.nii.gz']) ...
            ' --match 1 --erode 1 --o ' fullfile(session_dir,d{rr},['func.aseg.' mask_names{mm} '.nii.gz'])]);
    end
    disp('done.');
end